%macro ensure_caslib_exists(bucket=, caslib=);

   %local caslib_exists region authdomain;
   %let region = ap-southeast-2;
   %let authdomain = AWSAUTHX;
   %let caslib_exists = 0;

   /* Sanity check */
   %if %length(&bucket) = 0 or %length(&caslib) = 0 %then %do;
      %put ERROR: Both BUCKET and CASLIB must be provided.;
      %return;
   %end;

   cas mysess;

   /* Get list of current caslibs */
   proc cas;
      table.caslibInfo result=casout;
      saveresult casout dataout=work._caslib_info (keep=caslib);
   run;

   /* Compare using DATA step safely */
   data _null_;
      length mcaslib $64;
      mcaslib = upcase("&caslib");
      set work._caslib_info;
      if upcase(caslib) = mcaslib then
         call symputx("caslib_exists", 1);
   run;

   /* Now safely check */
   %if &caslib_exists = 0 and %upcase(&caslib) ne CASUSER %then %do;
      caslib &caslib datasource=(
         srctype="s3",
         authdomain="&authdomain",
         region="&region",
         bucket="&bucket"
      ) subdirs;
      %put NOTE: CASLIB &caslib created for bucket &bucket.;
   %end;
   %else %do;
      %put NOTE: CASLIB &caslib already exists.;
   %end;

%mend;


%macro ensure_caslib_exists(bucket=, caslib=);

   %local caslib_exists region authdomain;
   %let region = ap-southeast-2;
   %let authdomain = AWSAUTHX;
   %let caslib_exists = 0;

   %if %length(&bucket) = 0 or %length(&caslib) = 0 %then %do;
      %put ERROR: Both BUCKET and CASLIB must be provided.;
      %return;
   %end;

   cas mysess;

   /* NO macro result= â€“ use simple out= dataset */
   proc cas;
      table.caslibInfo / out={caslibInfo=work._caslib_info};
   run;

   /* Check if caslib exists */
   data _null_;
      length mcaslib $64;
      mcaslib = upcase("&caslib");
      set work._caslib_info;
      if upcase(caslib) = mcaslib then
         call symputx("caslib_exists", 1);
   run;

   %if &caslib_exists = 0 and %upcase(&caslib) ne CASUSER %then %do;
      caslib &caslib datasource=(
         srctype="s3",
         authdomain="&authdomain",
         region="&region",
         bucket="&bucket"
      ) subdirs;
      %put NOTE: CASLIB &caslib created for bucket &bucket.;
   %end;
   %else %do;
      %put NOTE: CASLIB &caslib already exists.;
   %end;

%mend;



%macro ensure_caslib_exists(bucket=, caslib=);

   %local caslib_exists region authdomain;
   %let region=ap-southeast-2;
   %let authdomain=AWSAUTHX;
   %let caslib_exists=0;

   %put =====================================;
   %put INFO: Running ensure_caslib_exists;
   %put INFO: Bucket  = &bucket;
   %put INFO: Caslib  = &caslib;
   %put INFO: Region  = &region;
   %put INFO: AuthDom = &authdomain;
   %put =====================================;

   %if %length(&bucket)=0 or %length(&caslib)=0 %then %do;
      %put ERROR: Missing required parameter: BUCKET or CASLIB;
      %return;
   %end;

   cas mysess;

   /* Get list of CASLIBs without macro results */
   proc cas;
      table.caslibInfo / out={caslibInfo=work._caslib_info};
   run;

   /* Check for existence */
   data _null_;
      set work._caslib_info;
      if upcase(caslib)=upcase("&caslib") then call symputx('caslib_exists',1);
   run;

   /* Conditionally create the CASLIB */
   %if &caslib_exists=0 and %upcase(&caslib) ne CASUSER %then %do;
      %put NOTE: Creating CASLIB &caslib for S3 bucket &bucket;
      caslib &caslib datasource=(
         srctype=s3,
         authdomain=&authdomain,
         region=&region,
         bucket=&bucket
      ) subdirs;
   %end;
   %else %do;
      %put NOTE: CASLIB &caslib already exists or is CASUSER;
   %end;

%mend;
