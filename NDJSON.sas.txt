/* Step 1: Register S3 CASLIB */
caslib myS3Lib datasource=(
  srctype="s3",
  region="your-region",
  bucket="your-bucket",
  authdomain="your-authdomain"
);


/* Step 2: Use Python to loop over all S3 files and load them as NDJSON */
proc python;
submit;

import re

# List all files in the S3 CASLIB
files = cas.table.fileInfo(caslib="myS3Lib").FileInfo
ndjson_files = [f["Name"] for f in files if not f["Name"].endswith(".json")]

for fname in ndjson_files:
    table_name = re.sub(r'\W+', '_', fname)  # sanitize to valid SAS table name
    print(f"Loading NDJSON file: {fname} ‚Üí table: {table_name}")

    try:
        cas.table.loadTable(
            path=fname,
            caslib="myS3Lib",
            importOptions={
                "fileType": "json",
                "JSONType": "njson"  # Required for NDJSON
            },
            casOut={
                "name": table_name,
                "caslib": "casuser",
                "replace": True
            }
        )
    except Exception as e:
        print(f"Failed to load {fname}: {e}")

endsubmit;
run;

/////////
proc python;
submit;

import re

# Get full list of files in the bucket
all_files = cas.table.fileInfo(caslib="myS3Lib").FileInfo

# Filter files under the sub-path and no .json extension
ndjson_files = [
    f["Name"] for f in all_files
    if f["Name"].startswith("data/ndjson/")
       and not f["Name"].endswith(".json")
]

# Load each NDJSON file
for fname in ndjson_files:
    table_name = re.sub(r'\W+', '_', fname.split('/')[-1])  # safe name
    print(f"üîÑ Loading {fname} as NDJSON ‚Üí {table_name}")

    try:
        cas.table.loadTable(
            path=fname,
            caslib="myS3Lib",
            importOptions={
                "fileType": "json",
                "JSONType": "njson"
            },
            casOut={
                "name": table_name,
                "caslib": "casuser",
                "replace": True
            }
        )
    except Exception as e:
        print(f"‚ùå Failed loading {fname}: {e}")

endsubmit;
run;

